import org.gradle.internal.jvm.Jvm

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlin-kapt'

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    compile 'com.google.auto.service:auto-service:1.0-rc6'
    kapt 'com.google.auto.service:auto-service:1.0-rc6'
    compile 'com.squareup:javapoet:1.8.0'
    compile 'com.squareup:kotlinpoet:1.4.4'
    compile files(Jvm.current().toolsJar)

    compile project(":spdt-annotation")
    compile project(":spdt-data")
}

compileJava {
    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

version = spdt_version

apply from: '../publish_java.gradle'

publishing {

    publications {
        maven(MavenPublication) {
            groupId 'com.unionyy.mobile'
            artifactId 'spdt-compiler'
            // Tell maven to prepare the generated "*.aar" file for publishing
            artifact("$buildDir/libs/${project.getName()}-${version}.jar")
            artifact androidSourcesJar

            pom.withXml {
                //Creating additional node for dependencies
                def dependenciesNode = asNode().appendNode('dependencies')

                //Defining configuration names from which dependencies will be taken (debugCompile or releaseCompile and compile)
                def configurationNames = ['compile']

                configurationNames.each { configurationName ->
                    configurations[configurationName].allDependencies.each {
                        if (it.group != null && it.name != null) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)

                            //If there are any exclusions in dependency
                            if (it.excludeRules.size() > 0) {
                                def exclusionsNode = dependencyNode.appendNode('exclusions')
                                it.excludeRules.each { rule ->
                                    def exclusionNode = exclusionsNode.appendNode('exclusion')
                                    exclusionNode.appendNode('groupId', rule.group)
                                    exclusionNode.appendNode('artifactId', rule.module)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
