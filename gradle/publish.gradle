apply plugin: 'maven-publish'
apply plugin: 'maven'

group = libraryGroupId                               // Maven Group ID for the artifact
version = libraryVersion

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        getArchiveBaseName().set(libraryName)
        from android.sourceSets.main.java.srcDirs
    }
    task androidNativeJar(type: Jar) {
        classifier = 'so'
        from(new File(buildDir, 'libs'))
        include("**/*.so")
    }
    ext.libraryOutputFile = "$buildDir/outputs/aar/${project.getName()}-release.aar"
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        getArchiveBaseName().set(libraryName)
        from sourceSets.main.allSource
    }
    ext.libraryOutputFile = "$buildDir/libs/${project.getName()}-${version}.jar"
}
println("artifect $libraryOutputFile")

publishing {
    publications {
        MyPublication(MavenPublication) {
            groupId libraryGroupId
            artifactId libraryName
            artifact(libraryOutputFile)
            artifact sourcesJar
            version libraryVersion
            pom {
                name = libraryName
                description = libraryDescription
                url = siteUrl

                developers {
                    developer {
                        id = developerId
                        name = developerName
                        email = developerEmail
                    }
                }
                scm {
                    connection = gitUrl
                    developerConnection = gitUrl
                    url = siteUrl
                }
            }
            pom.withXml {
                //Creating additional node for dependencies
                def dependenciesNode = asNode().appendNode('dependencies')

                //Defining configuration names from which dependencies will be taken (debugCompile or releaseCompile and compile)
                def configurationNames = ['api', "implementation"]
                configurationNames.each { configurationName ->
                    if (!configurations.names.contains(configurationName)) {
                        return
                    }
                    configurations[configurationName].allDependencies.each {
                        if (it.group != null && it.name != null) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)

                            //If there are any exclusions in dependency
                            if (it.excludeRules.size() > 0) {
                                def exclusionsNode = dependencyNode.appendNode('exclusions')
                                it.excludeRules.each { rule ->
                                    def exclusionNode = exclusionsNode.appendNode('exclusion')
                                    exclusionNode.appendNode('groupId', rule.group)
                                    exclusionNode.appendNode('artifactId', rule.module)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

uploadArchives {
    repositories.mavenDeployer {
        repository(url: uri('../spdtRepo'))
        pom.groupId = libraryGroupId
        pom.artifactId = libraryName
        pom.version = version
    }
}